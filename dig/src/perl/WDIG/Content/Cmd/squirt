#!/usr/bin/perl -w

# $Id$

=head1 NAME

squirt - Command line interface to the WDIG::Content::Cmd modules

=head1 AUTHOR

 $Author$
 $Date$

 Initial Author: paul.x.egan.-nd@email.disney.com
 Date: 2003/05/14

=head1 SYNOPSIS

 squirt [options] <command> < input

=head1 OPTIONS

  config - Specify an XML config file containing defaults for each option
    as defined by the WDIG::Content::Cmd defaults option.
  log_conf_file - The Log4perl configuration file.

=head1 DESCRIPTION

This script is simply a command line interface to the 
WDIG::Content::Cmd package.  It reads all STDIN and passes this 
to the specified command, printing the results back to STDOUT.
The input and output tend to be XML but depends on the command.

=head1 SCRIPT NAME

This script was originally called C<content_cmd> but that was a bit
boring!  C<squirt> is a character from "Finding Nemo" and slightly
meaningful.

=head1 HISTORY

 $Log: squirt,v $
 Revision 1.1  2003/08/26 22:41:31  pegan
 Initial revision


=head1 COPYRIGHT

(C) Walt Disney Internet Group.  All rights reserved.

=cut

######################################################################

use 5.006_001;
use strict;
use warnings;

use lib('/share/src/perl/test_lib','/share/lib/perl5/5.6.1','/share/lib/perl5/site_perl');
use Getopt::Long;
use Pod::Usage;
use WDIG::Content::Cmd;
use WDIG::Content::Cmd::Error qw(:try);

my $Script_Defaults_File = "/share/lib/cms_config.xml";

my @Opt_Config = (
  'defaults|config=s',
  'log_conf_file=s',
  'help|?'
);

my @Valid_Cmds = (
  'push_drop',
  'refresh_app',
  'enable_url',
  'disable_url' 
);

umask(0002);


######################################################################
# Process command line arguments:

my %opt = ();
GetOptions(\%opt, @Opt_Config) or pod2usage();
pod2usage(-exitstatus=>0, -verbose=>1) if ( $opt{help} );

$opt{defaults} = $Script_Defaults_File if ( !$opt{defaults} );

my $cmd = shift();
pod2usage(-message=>"Command must be one of: ".join(" ",@Valid_Cmds))
            if ( !$cmd or !grep(/$cmd/, @Valid_Cmds) );


######################################################################
# Do as requested:

my $success = undef;

my $input = join('',<STDIN>);

try {

  my $cmd = new WDIG::Content::Cmd($cmd, %opt);

  my $success = $cmd->exec($input);

  throw WDIG::Content::Cmd::Error("The command did not succeed") if ( !$success );

  print_response('success',$cmd->output());
  
} catch Error with {

  my $error = shift();
  print_response('error',$error);
  exit(1);

};

exit(0);


######################################################################

sub print_response
{
 my $type = shift();
 my $content = shift();
 return (print "<response type=\"$type\">\n$content\n</response>\n");
}

__END__
