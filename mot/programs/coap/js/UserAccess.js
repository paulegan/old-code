
//  Author:             paul@hr.emea.mot.com
//  DevDate:            19990909
//  TestedWith:		ES 362
//  TestDate:
//  ReviewedBy:         
//  ReviewDate:         
//  ApprovedBy:
//  ProdDate:
//  History:            
//  Description:        Object for user access table operations and security checks. 
//  Keywords:            
//  Notes:		



function UserAccess(user)
{
 // extends StandardTable
 this.parent = StandardTable;
 this.parent("user_access",project.tableDef["user_access"]);

 // Properties
 this.user = user.toUpperCase();
 this.allowedTabList = null;
 this.clientFuncs.push("isMotEmailID");
 this.coreID2name = "emp_ident"; // If defined, object uses this table to look up names

 this.tabs = [];
 for (var t=0; t<project.tabs.length; t++ )
   this.tabs.push(project.tabs[t].name);

 // Methods
 this.getRows = UserAccess_getRows;
 this.updateAll = UserAccess_updateAll;
 this.augmentRequest = UserAccess_augmentRequest;
 this.validDataAuxCheck = UserAccess_validDataAuxCheck;
 this.writeAuxClientCheck = UserAccess_writeAuxClientCheck;
 this.writeUpdateAllForm = UserAccess_writeUpdateAllForm;
 this.writeUpdateForm = UserAccess_writeUpdateForm;
 this.allowsAccessTo = UserAccess_allowsAccessTo;
 this.allowedTabs = UserAccess_allowedTabs;

}// UserAccess


// Overrides standard getRows() to join to "this.coreID2name" in order
// to get the users' names.  Reverts to default if "this.coreID2name"
// is undefined.
function UserAccess_getRows(whereClause,order)
{
 if (this.coreID2name)
   return (database.superCursor("SELECT name,user_id,"+this.tabs.join(",")+" FROM "+this.tableName+", emp_ident WHERE user_id = core_id(+)"+(whereClause?(" "+whereClause):"")+(order?(" ORDER BY "+order):"")));
 else
   return (database.superCursor("SELECT * FROM "+this.tableName+(whereClause?(" WHERE "+whereClause):"")+(order?(" ORDER BY "+order):"")));
}// UserAccess_getRows


// Goes through the request object generated by writeUpdateAllForm()
// and updates every row in the table.  If a user has no tabs selected
// then that user's row is deleted.  Will return false if the transaction
// has to be rolled back.
function UserAccess_updateAll(request)
{
 var user;
 var result = 0;
 var selectionMade;

 database.beginTransaction();
 user = database.superCursor("SELECT * FROM "+this.tableName,true);

 while (user.next()){
   selectionMade = false;
   for (var a=0; a<this.tabs.length; a++ )
     if ( request[user.user_id+"_"+this.tabs[a]]=="on" )
       selectionMade = true;
   if ( selectionMade ){
     for (var a=0; a<this.tabs.length; a++ )
       user[this.tabs[a].toUpperCase()] = (request[user.user_id+"_"+this.tabs[a]]=="on")?"Y":null;
     result += user.updateRow(this.tableName);
   }else{
     result += user.deleteRow(this.tableName);
   }
 }

 if (result == 0){
   database.commitTransaction();
   user.close();
   return (true);
 }else{
   this.errorMessage = "Transaction rolled back! "+database.majorErrorMessage();
   database.rollbackTransaction();
   user.close();
   return (false);
 }

}// UserAccess_updateAll


// Converts the user ID to upper case and sets the tab fields
// to "Y" or null depending on whether they were selected or not.
// Returns the modified request object.
function UserAccess_augmentRequest(request)
{
 if (this.requestAugmented) return (request);

 request.user_id = request.user_id.toUpperCase();

 for (var a=0; a<this.tabs.length; a++ )
   request[this.tabs[a]] = (request[this.tabs[a]]=="on")?"Y":null;

 this.requestAugmented = true;

 return (request);
}// UserAccess_augmentRequest


// Adds additional server side checks to the standard validData()
// method - checks that the user ID is a valid Motorola core ID
// and that at least one tab was selected.  Returns false if
// one of these tests fail.
function UserAccess_validDataAuxCheck(request)
{
 var selectionMade = false;

 for (var a=0; a<this.tabs.length; a++ )
   if ( request[this.tabs[a]] )
     selectionMade = true;

 if ( !selectionMade ){
   this.errorMessage = "Please select at least one area.";
   return (false);
 }

 if ( !isMotEmailID(request.user_id) ){
   this.errorMessage = "The user ID does not look valid!";
   return (false);
 }

 return (true);
}// UserAccess_validDataAuxCheck


// Adds additional client side checks to ensure that the user ID
// is a valid Motorola core ID and that at least one tab was selected.
//  Returns false if one of these tests fail.
function UserAccess_writeAuxClientCheck()
{
 write("  if (!isMotEmailID(form.user_id.value)){\n");
 write("    alert(\"The user ID does not look valid!\");\n");
 write("    return (false);\n");
 write("  }\n\n");
 write("  if (!form."+this.tabs.join(".checked && !form.")+".checked){\n");
 write("    alert(\"Please select at least one area.\");\n");
 write("    return (false);\n");
 write("  }\n\n");

 return (true);
}// UserAccess_writeAuxClientCheck



// Writes out a table showing each user followed by a group of
// checkboxes representing the tabs they have access to.  An update
// button is also included.  The request object generated by the form 
// submission should be passed to updateAll().
function UserAccess_writeUpdateAllForm()
{
 write("<SCRIPT LANGUAGE=\"JavaScript\">\n");
 write(" <!--\n\n");
 write(" function validateUpdateAllForm(form)\n");
 write(" {\n");
 write("  var userList = form.userList.value.split(',');\n");
 write("  for ( var u=0; u<userList.length; u++)\n");
 write("    if (!form[userList[u]+\"_"+this.tabs.join("\"].checked && !form[userList[u]+\"_")+"\"].checked && !confirm(\"Do you want to remove user \"+userList[u]+\"?\"))\n");
 write("        return (false);\n\n");
 write("  return (true);\n");
 write(" }\n");
 write("\n // -->\n");
 write("</SCRIPT>\n");

 write("  <FORM METHOD=POST onSubmit=\"return validateUpdateAllForm(this);\">\n");
 write("  <INPUT TYPE=HIDDEN NAME=\"update\" VALUE=\"all\">\n\n");
 write("  <TABLE WIDTH=90% BORDER=1 BGCOLOR=#FFFFFF CELLPADDING=2 CELLSPACING=0>\n");

 write("   <TR BGCOLOR=#999999>\n");
 write("    <TD><FONT FACE=\"Arial,Helvetica\">ID</FONT></TD>\n");
 write("    <TD><FONT FACE=\"Arial,Helvetica\">Name</FONT></TD>\n");

 for (var a=0; a<project.tabs.length; a++ )
   write("<TD><FONT FACE=\"Arial,Helvetica\">"+project.tabs[a].acronym+"</FONT></TD>");

 write("   </TR>\n");

 var user = this.getRows();
 var userList = new Array();

 while (user.next()){
   write("<TR><TD>"+user.USER_ID+"</TD>");
   write("<TD>"+(user.NAME?user.NAME:"Unknown")+"</TD>");
   for (var a=0; a<project.tabs.length; a++ ){
     write("<TD><INPUT TYPE=CHECKBOX NAME=\""+user.USER_ID+"_"+project.tabs[a].name+"\" ");
     write((user[project.tabs[a].name.toUpperCase()]?"CHECKED":"")+"></TD>");
   }
   write("</TR>\n");
   userList.push(user.USER_ID);
 }
 user.close();

 write("   <TR><TD COLSPAN=\""+(2+project.tabs.length)+"\" ALIGN=RIGHT><INPUT TYPE=SUBMIT VALUE=\" Update \"></TD></TR>\n");

 write("  </TABLE>\n");

 write("  <INPUT TYPE=HIDDEN NAME=\"userList\" VALUE=\""+userList.join(",")+"\">\n");
 write("  </FORM>\n");

 return (true);
}// UserAccess_writeUpdateAllForm


// Overrides the standard writeUpdateForm() to write a form with
// checkboxes for the tab fields instead of the default text fields.
function UserAccess_writeUpdateForm()
{
 this.writeClientCheck("validateUpdateForm");

 write("  <FORM METHOD=POST onSubmit=\"return validateUpdateForm(this);\">\n");
 write("  <INPUT TYPE=HIDDEN NAME=\"update\" VALUE=\"add\">\n");

 write("  <TABLE WIDTH=90% BORDER=1 CELLPADDING=5 CELLSPACING=0><TR><TD>\n");
 write("   <TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>\n");
 write("    <TR>\n");
 write("     <TD>User ID: <INPUT TYPE=TEXT SIZE=8 NAME=\"user_id\"></TD>\n");
 write("     <TD>&nbsp;</TD>\n");

 for (var a=0; a<project.tabs.length; a++ )
   write("<TD>"+project.tabs[a].acronym+": <INPUT TYPE=CHECKBOX NAME=\""+project.tabs[a].name+"\"></TD>");

 write("    </TR>\n");
 write("    <TR>\n");
 write("     <TD>&nbsp;<A HREF=\"javascript:null;\" onClick=\"window.open('empSearch.html?searchField=core_id&targetForm=2&targetField=user_id','empSearch','width=250,height=150,resizable=1,scrollbars=yes'); return false;\">Lookup</A></TD>\n");
 write("     <TD COLSPAN=\""+(1+project.tabs.length)+"\" ALIGN=RIGHT>\n");
 write("      <INPUT TYPE=SUBMIT VALUE=\" Add New User \">\n");
 write("     </TD>\n");
 write("    </TR>\n");
 write("   </TABLE>\n");
 write("  </TD></TR></TABLE>\n");
 write("  </FORM>\n");

 return (true);
}// UserAccess_writeUpdateForm


// Returns the list of tabs a user has access to.  If the user does
// not exist or does not have access to any tab, returns null.
function UserAccess_allowedTabs()
{
 if (this.allowedTabList) return (this.allowedTabList);

 var cursor = database.superCursor("SELECT * FROM "+this.tableName+" WHERE user_id = '"+this.user+"'");

 if (cursor.next()){
   this.allowedTabList = new Array();
   for (var a=0; a<project.tabs.length; a++ )
     if (cursor[project.tabs[a].name.toUpperCase()])
       this.allowedTabList.push(project.tabs[a]);
 }
 cursor.close();

 if (this.allowedTabList && this.allowedTabList.length<1) delete this.allowedTabList;

 return (this.allowedTabList);
}// UserAccess_allowedTabs


// Returns true if the user should have access to the specifed tab.
function UserAccess_allowsAccessTo(tabName)
{
 var tabList = this.allowedTabs();

 for (var a=0; a<tabList.length; a++ )
   if ( tabName == tabList[a].name )
     return (true);

 return (false);
}// UserAccess_allowsAccessTo
